xlab('Variables') + ylab('Effects on Pr{Hired}')+
geom_text(aes(label = paste(controlled.hired.df$Marginal.Effects,"%"),vjust=ifelse(controlled.hired.df$Marginal.Effects>=0,-1,2)),size=3.5)+
ggtitle("Effects of Variables on Pr{Hired}\nSecond Model 5")+
labs(subtitle="(Among those who passed the MC panel)")+
theme_few()+
theme(plot.title=element_text(face ="bold",size=20,hjust=0.5,vjust=0.25), axis.title = element_text(size=15),plot.subtitle = element_text(size=15,hjust=0.5,vjust=0.25))+
theme(axis.text.x=element_text(angle=45,hjust=1, vjust =1,size=13), axis.text.y = element_text(size=13))+
ylim(-40,60)+
theme(legend.justification = c(1.05, 1.5), legend.position = c(1, 1), legend.text = element_text(colour = "white"),legend.direction = "horizontal",legend.title = element_text(size=15))
ggplot(controlled.hired.df, aes(x=reorder(Variables, -Marginal.Effects), y=Marginal.Effects))+
geom_bar(stat="identity", aes(col = controlled.hired.df$P..z.<=0.1),fill="steelblue3", size=1)+
scale_colour_manual(name = 'Statistically significant',values = setNames(c("red","white"),c(T,F)), breaks=T, labels = T ) +
xlab('Variables') + ylab('Effects on Pr{Hired}')+
geom_text(aes(label = paste(controlled.hired.df$Marginal.Effects,"%"),vjust=ifelse(controlled.hired.df$Marginal.Effects>=0,-1,2)),size=3.5)+
ggtitle("Effects of Variables on Pr{Hired}\nSecond Model 4")+
labs(subtitle="(Among those who passed the MC panel)")+
theme_few()+
theme(plot.title=element_text(face ="bold",size=20,hjust=0.5,vjust=0.25), axis.title = element_text(size=15),plot.subtitle = element_text(size=15,hjust=0.5,vjust=0.25))+
theme(axis.text.x=element_text(angle=45,hjust=1, vjust =1,size=13), axis.text.y = element_text(size=13))+
ylim(-40,40)+
theme(legend.justification = c(1.05, 1.5), legend.position = c(1, 1), legend.text = element_text(colour = "white"),legend.direction = "horizontal",legend.title = element_text(size=15))
test_model=glm(Hired_dummy~female+urr+public.sector+Mission+IMF+PhD+Age.Panel+PhD:public.sector, data=passed.dataset2, family=binomial(link="probit"))
summary(test_model)
coeftest(test_model,vcov = sandwich1)
boot.probit = function(data,index){
return(coef(glm(Hired_dummy~female+urr+Mission+IMF+PhD+Age.Panel+public.sector+PhD:public.sector, data = data, subset=index, family = binomial(link="probit"))))
}
set.seed(1)
boot.probit(passed.dataset2, sample(dim(passed.dataset2)[1],dim(passed.dataset2)[1],replace=T))
boot(passed.dataset2,boot.probit,R=10000)
test_model=glm(Hired_dummy~female+urr+OED+public.sector+Mission+IMF+PhD+MF_experience+Age.Panel+urr:female, data=passed.dataset2, family=binomial(link="probit"))
summary(test_model)
boot.probit = function(data,index){
return(coef(glm(Hired_dummy~female+urr+OED+public.sector+Mission+IMF+PhD+MF_experience+Age.Panel+urr:female, data = data, subset=index, family = binomial(link="probit"))))
}
set.seed(1)
boot.probit(passed.dataset2, sample(dim(passed.dataset2)[1],dim(passed.dataset2)[1],replace=T))
boot(passed.dataset2,boot.probit,R=10000)
controlled.hired8.p.mfx=probitmfx(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector, data=passed.dataset2, robust=TRUE)
controlled.hired7.p.mfx=probitmfx(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+urr:female+PhD:public.sector, data = passed.dataset2, robust=TRUE)
controlled.hired.df = data.frame(controlled.hired7.p.mfx$mfxest)
controlled.hired.df["Variables"]=rownames(controlled.hired.df)
controlled.hired.df["Marginal.Effects"]=round(controlled.hired.df$dF.dx*100,digits = 1)
controlled.hired.df
controlled.hired.df[10,5]="urr_female"
controlled.hired.df[11,5]="PhD_public"
ggplot(controlled.hired.df, aes(x=reorder(Variables, -Marginal.Effects), y=Marginal.Effects))+
geom_bar(stat="identity", aes(col = controlled.hired.df$P..z.<=0.1),fill="steelblue3", size=1)+
scale_colour_manual(name = 'Statistically significant',values = setNames(c("red","white"),c(T,F)), breaks=T, labels = T ) +
xlab('Variables') + ylab('Effects on Pr{Hired}')+
geom_text(aes(label = paste(controlled.hired.df$Marginal.Effects,"%"),vjust=ifelse(controlled.hired.df$Marginal.Effects>=0,-1,2)),size=3.5)+
ggtitle("Effects of Variables on Pr{Hired}\nSecond Model 4")+
labs(subtitle="(Among those who passed the MC panel)")+
theme_few()+
theme(plot.title=element_text(face ="bold",size=20,hjust=0.5,vjust=0.25), axis.title = element_text(size=15),plot.subtitle = element_text(size=15,hjust=0.5,vjust=0.25))+
theme(axis.text.x=element_text(angle=45,hjust=1, vjust =1,size=13), axis.text.y = element_text(size=13))+
ylim(-40,40)+
theme(legend.justification = c(1.05, 1.5), legend.position = c(1, 1), legend.text = element_text(colour = "white"),legend.direction = "horizontal",legend.title = element_text(size=15))
ggsave("Controlled_hired4.png")
controlled.hired.df = data.frame(controlled.hired8.p.mfx$mfxest)
controlled.hired.df["Variables"]=rownames(controlled.hired.df)
controlled.hired.df["Marginal.Effects"]=round(controlled.hired.df$dF.dx*100,digits = 1)
controlled.hired.df
controlled.hired.df[10,5]="PhD_public"
ggplot(controlled.hired.df, aes(x=reorder(Variables, -Marginal.Effects), y=Marginal.Effects))+
geom_bar(stat="identity", aes(col = controlled.hired.df$P..z.<=0.1),fill="steelblue3", size=1)+
scale_colour_manual(name = 'Statistically significant',values = setNames(c("red","white"),c(T,F)), breaks=T, labels = T ) +
xlab('Variables') + ylab('Effects on Pr{Hired}')+
geom_text(aes(label = paste(controlled.hired.df$Marginal.Effects,"%"),vjust=ifelse(controlled.hired.df$Marginal.Effects>=0,-1,2)),size=3.5)+
ggtitle("Effects of Variables on Pr{Hired}\nSecond Model 3")+
labs(subtitle="(Among those who passed the MC panel)")+
theme_few()+
theme(plot.title=element_text(face ="bold",size=20,hjust=0.5,vjust=0.25), axis.title = element_text(size=15),plot.subtitle = element_text(size=15,hjust=0.5,vjust=0.25))+
theme(axis.text.x=element_text(angle=45,hjust=1, vjust =1,size=13), axis.text.y = element_text(size=13))+
ylim(-40,40)+
theme(legend.justification = c(1.05, 1.5), legend.position = c(1, 1), legend.text = element_text(colour = "white"),legend.direction = "horizontal",legend.title = element_text(size=15))
ggsave("Controlled_hired3.png")
controlled.hired7.p.mfx=probitmfx(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+urr:female+PhD:public.sector, data = passed.dataset2, robust=TRUE)
controlled.hired7.p.mfx
controlled.hired8.p = glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+Age.Panel+urr:female+PhD:public.sector, data=passed.dataset2, family=binomial(link="probit"))
coeftest(controlled.hired8.p,vcov = sandwich1)
controlled.hired7.p = glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+urr:female+PhD:public.sector, data=passed.dataset2, family=binomial(link="probit"))
coeftest(controlled.hired7.p,vcov = sandwich1)
controlled.hired7.p.mfx=probitmfx(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+urr:female+PhD:public.sector, data = passed.dataset2, robust=TRUE)
controlled.hired7.p.mfx
controlled.hired8.p.mfx
controlled.hired8.p = glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector, data=passed.dataset2, family=binomial(link="probit"))
coeftest(controlled.hired8.p,vcov = sandwich1)
controlled.hired8.p.mfx=probitmfx(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector, data=passed.dataset2, robust=TRUE)
controlled.hired8.p.mfx
coeftest(controlled.hired8.p,vcov = sandwich1)
?probitmfx
install.packages('logisf')
install.packages('brglm(')
install.packages('brglm')
library(brglm)
brglm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+urr:female+PhD:public.sector,data=passed.dataset2, family=binomial(link="probit"))
brg.controlled8=brglm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+urr:female+PhD:public.sector,data=passed.dataset2, family=binomial(link="probit"))
summary(brg.controlled8)
brg.controlled8=brglm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+urr:female+PhD:public.sector,data=passed.dataset2, family=binomial(link="probit"),method = "brglm.fit")
summary(brg.controlled8)
summary(controlled.hired8.p)
summary(controlled.hired7.p)
install.packages("shrink")
load("5.R.RData")
require(boot)
summary(Xy)
predict(controlled.hired8.p)
?confusionMatrix
mean((Hired_dummy-predict(controlled.hired8.p))^2)
install.packages('caret')
library(caret)
?confusionMatrix
pred_hired=predict(controlled.hired7.p)
confusionMatrix(data=pred_hired, testing$Class)
confusionMatrix(data=pred_hired)
confusionMatrix(Hired_dummy,pred_hired,cutoff=0.5)
confusionMatrix(data=pred_hired,cutoff=0.5)
confusionMatrix(data=pred_hired,passed.dataset2$Hired_dummy)
pred_hired=predict(controlled.hired7.p)
pred_hired=predict(controlled.hired7.p,passed.dataset2)
confusionMatrix(passed.dataset2$Hired_dummy,pred_hired)
pred_hired=predict(controlled.hired7.p,data=passed.dataset2)
confusionMatrix(passed.dataset2$Hired_dummy,pred_hired)
controlled.hired8.probs=predict(controlled.hired8.p,type="response")
?contrasts
contrasts(Hired_dummy)
length(controlled.hired8.probs)
glm.pred=rep("Down", 177)
glm.pred[controlled.hired8.probs>.5]="Up"
table(glm.pred, Hired_dummy)
table(glm.pred, passed_dataset2$Hired_dummy)
table(glm.pred, passed.dataset2$Hired_dummy)
controlled.hired8.probs=predict(controlled.hired8.p,type="response")
controlled.hired8.probs[1:10]
glm.pred=rep(0, 177)
glm.pred[controlled.hired8.probs>.5]=1
table(glm.pred, passed.dataset2$Hired_dummy)
passed.dataset2$Hired_dummy
length(passed.dataset2$Hired_dummy)
table(glm.pred, passed.dataset2$Hired_dummy[passed.dataset2$Age.Panel!=NA])
passed.dataset2$Hired_dummy[passed.dataset2$Age.Panel!=NA]
passed.dataset2$Hired_dummy[passed.dataset2$Age.Panel!=NA,]
?subset
subset(passed.dataset2, Age.Panel != NA)
subset(passed.dataset2, !is.na(passed.dataset2[,"Age.Panel"]))
length(subset(passed.dataset2, !is.na(passed.dataset2[,"Age.Panel"])))
length(subset(passed.dataset2, (!is.na(passed.dataset2[,"Age.Panel"]))))
subset=na.omit(passed.dataset2)
length(subset)
length(passed.dataset2$Age.Panel)
length(glm.pred)
controlled.hired8.p
length(passed.dataset2)
passed.dataset = subset(MCdata, Passed_MC ==1)
passed.dataset2 = subset(MCdata_subset, Passed_MC ==1)
length(passed.dataset2)
dim(passed.dataset2)
dim(subset)
second.model.data= subset(passed.dataset2, !is.na(passed.dataset2[,"Age.Panel"]))
dim(second.model.data)
table(glm.pred, second.model.data$Hired_dummy)
secondmod.data= subset(passed.dataset2, !is.na(passed.dataset2[,"Age.Panel"]))
train = sample(dim(secondmod.data)[1],dim(secondmod.data)[1]/2)
controlled8.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled8.fitprob)
probs = predict(controlled8.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
mean(pred.glm != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
train = sample(dim(secondmod.data)[1],dim(secondmod.data)[1]*2/3)
controlled8.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled8.fitprob)
set.seed(123)
train = sample(dim(secondmod.data)[1],dim(secondmod.data)[1]*2/3)
controlled8.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled8.fitprob)
probs = predict(controlled8.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
mean(pred.glm != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
tablea(pred.glm, secondmod.data[-train, ]$Hired_dummy)
table(pred.glm, secondmod.data[-train, ]$Hired_dummy)
13+27
177/3
93/135
93/110
27/(9+27)
84.55+37.31
121.86/2
mean(pred.glm != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
table(pred.glm, secondmod.data[-train, ]$Hired_dummy)
9/(9+27)
13/23
train = sample(dim(secondmod.data)[1],dim(secondmod.data)[1]*2/3)
controlled8.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled8.fitprob)
probs = predict(controlled8.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
mean(pred.glm != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
controlled7.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector+urr:female, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled7.fitprob)
probs2 = predict(controlled7.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm2 <- rep(0, length(probs2))
pred.glm2[probs2 > 0.5] <- 1
mean(pred.glm2 != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
table(pred.glm2, secondmod.data[-train, ]$Hired_dummy)
30/41
94/110
27/(9+27)
set.seed(12)
train = sample(dim(secondmod.data)[1],dim(secondmod.data)[1]*2/3)
controlled8.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled8.fitprob)
probs = predict(controlled8.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
mean(pred.glm != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
controlled7.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector+urr:female, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled7.fitprob)
probs2 = predict(controlled7.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm2 <- rep(0, length(probs2))
pred.glm2[probs2 > 0.5] <- 1
mean(pred.glm2 != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
set.seed(123)
train = sample(dim(secondmod.data)[1],dim(secondmod.data)[1]*2/3)
controlled8.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled8.fitprob)
probs = predict(controlled8.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
mean(pred.glm != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
controlled7.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector+urr:female, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled7.fitprob)
probs2 = predict(controlled7.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm2 <- rep(0, length(probs2))
pred.glm2[probs2 > 0.5] <- 1
mean(pred.glm2 != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
set.seed(1)
train = sample(dim(secondmod.data)[1],dim(secondmod.data)[1]*2/3)
controlled8.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled8.fitprob)
probs = predict(controlled8.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
mean(pred.glm != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
controlled7.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector+urr:female, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled7.fitprob)
probs2 = predict(controlled7.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm2 <- rep(0, length(probs2))
pred.glm2[probs2 > 0.5] <- 1
mean(pred.glm2 != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
set.seed(13)
train = sample(dim(secondmod.data)[1],dim(secondmod.data)[1]*2/3)
controlled8.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled8.fitprob)
probs = predict(controlled8.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
mean(pred.glm != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
controlled7.fitprob=glm(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel+PhD:public.sector+urr:female, data=secondmod.data,subset=train,family=binomial(link="probit"))
summary(controlled7.fitprob)
probs2 = predict(controlled7.fitprob, newdata = secondmod.data[-train, ], type = "response")
pred.glm2 <- rep(0, length(probs2))
pred.glm2[probs2 > 0.5] <- 1
mean(pred.glm2 != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
table(pred.glm2, secondmod.data[-train, ]$Hired_dummy)
(5+18)/(18+28+13)
mean(pred.glm2 != secondmod.data[-train, ]$Hired_dummy) #compute the validation set error
base.hired9.p.mfx=probitmfx(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+Age.Panel, data= MCdata_subset, robust = TRUE)
base.hired.df = data.frame(base.hired9.p.mfx$mfxest)
base.hired.df["Variables"]=rownames(base.hired.df)
base.hired.df["Marginal.Effects"]=round(base.hired.df$dF.dx*100,digits = 1)
base.hired.df
ggplot(base.hired.df, aes(x=reorder(Variables, -Marginal.Effects), y=Marginal.Effects))+
geom_bar(stat="identity", aes(col = base.hired.df$P..z.<0.1),fill="steelblue3", size=1)+
scale_colour_manual(name = 'Statistically significant',values = setNames(c("red","white"),c(T,F)), breaks=T, labels = T ) +
xlab('Variables') + ylab('Effects on Pr{Hired}')+
geom_text(aes(label = paste(base.hired.df$Marginal.Effects,"%"),vjust=ifelse(base.hired.df$Marginal.Effects>=0,-1,2)),size=3.5)+
ggtitle("Effects of Variables on Pr{Hired}\nBase Model 2")+
theme_few()+
theme(plot.title=element_text(face ="bold",size=20,hjust=0.5,vjust=0.25), axis.title = element_text(size=15))+
theme(axis.text.x=element_text(angle=45,hjust=1, vjust =1,size=13), axis.text.y = element_text(size=13))+
ylim(-40,40)+
theme(legend.justification = c(1.05, 1.5), legend.position = c(1, 1), legend.text = element_text(colour = "white"),legend.direction = "horizontal",legend.title = element_text(size=15))
base.hired9.p.mfx=probitmfx(Hired_dummy~female+urr+OED+Mission+IMF+Age.Panel, data= MCdata_subset, robust = TRUE)
base.hired.df = data.frame(base.hired9.p.mfx$mfxest)
base.hired.df["Variables"]=rownames(base.hired.df)
base.hired.df["Marginal.Effects"]=round(base.hired.df$dF.dx*100,digits = 1)
ggplot(base.hired.df, aes(x=reorder(Variables, -Marginal.Effects), y=Marginal.Effects))+
geom_bar(stat="identity", aes(col = base.hired.df$P..z.<0.1),fill="steelblue3", size=1)+
scale_colour_manual(name = 'Statistically significant',values = setNames(c("red","white"),c(T,F)), breaks=T, labels = T ) +
xlab('Variables') + ylab('Effects on Pr{Hired}')+
geom_text(aes(label = paste(base.hired.df$Marginal.Effects,"%"),vjust=ifelse(base.hired.df$Marginal.Effects>=0,-1,2)),size=3.5)+
ggtitle("Effects of Variables on Pr{Hired}\nBase Model 2")+
theme_few()+
theme(plot.title=element_text(face ="bold",size=20,hjust=0.5,vjust=0.25), axis.title = element_text(size=15))+
theme(axis.text.x=element_text(angle=45,hjust=1, vjust =1,size=13), axis.text.y = element_text(size=13))+
ylim(-40,40)+
theme(legend.justification = c(1.05, 1.5), legend.position = c(1, 1), legend.text = element_text(colour = "white"),legend.direction = "horizontal",legend.title = element_text(size=15))
ggplot(base.hired.df, aes(x=reorder(Variables, -Marginal.Effects), y=Marginal.Effects))+
geom_bar(stat="identity", aes(col = base.hired.df$P..z.<0.1),fill="steelblue3", size=1)+
scale_colour_manual(name = 'Statistically significant',values = setNames(c("red","white"),c(T,F)), breaks=T, labels = T ) +
xlab('Variables') + ylab('Effects on Pr{Hired}')+
geom_text(aes(label = paste(base.hired.df$Marginal.Effects,"%"),vjust=ifelse(base.hired.df$Marginal.Effects>=0,-1,2)),size=3.5)+
ggtitle("Effects of Variables on Pr{Hired}\nBase Model 2")+
theme_few()+
theme(plot.title=element_text(face ="bold",size=20,hjust=0.5,vjust=0.25), axis.title = element_text(size=15))+
theme(axis.text.x=element_text(angle=45,hjust=1, vjust =1,size=13), axis.text.y = element_text(size=13))+
ylim(-30,30)+
theme(legend.justification = c(1.05, 1.5), legend.position = c(1, 1), legend.text = element_text(colour = "white"),legend.direction = "horizontal",legend.title = element_text(size=15))
ggsave("Base_hired2.png")
controlled.hired9.p.mfx=probitmfx(Hired_dummy~female+urr+OED+Mission+IMF+Age.Panel, data=passed.dataset2, robust = TRUE)
controlled.hired9.p.mfx
controlled.hired9.p.mfx=probitmfx(Hired_dummy~female+urr+OED+Mission+IMF+public.sector+PhD+MF_experience+Age.Panel, data=passed.dataset2, robust = TRUE)
controlled.hired9.p.mfx
controlled.hired.df = data.frame(controlled.hired9.p.mfx$mfxest)
controlled.hired.df["Variables"]=rownames(controlled.hired.df)
controlled.hired.df["Marginal.Effects"]=round(controlled.hired.df$dF.dx*100,digits = 1)
ggplot(controlled.hired.df, aes(x=reorder(Variables, -Marginal.Effects), y=Marginal.Effects))+
geom_bar(stat="identity", aes(col = controlled.hired.df$P..z.<=0.1),fill="steelblue3", size=1)+
scale_colour_manual(name = 'Statistically significant',values = setNames(c("red","white"),c(T,F)), breaks=T, labels = T ) +
xlab('Variables') + ylab('Effects on Pr{Hired}')+
geom_text(aes(label = paste(controlled.hired.df$Marginal.Effects,"%"),vjust=ifelse(controlled.hired.df$Marginal.Effects>=0,-1,2)),size=3.5)+
ggtitle("Effects of Variables on Pr{Hired}\nSecond Model 1")+
labs(subtitle="(Among those who passed the MC panel)")+
theme_few()+
theme(plot.title=element_text(face ="bold",size=20,hjust=0.5,vjust=0.25), axis.title = element_text(size=15),plot.subtitle = element_text(size=15,hjust=0.5,vjust=0.25))+
theme(axis.text.x=element_text(angle=45,hjust=1, vjust =1,size=13), axis.text.y = element_text(size=13))+
ylim(-40,40)+
theme(legend.justification = c(1.05, 1.5), legend.position = c(1, 1), legend.text = element_text(colour = "white"),legend.direction = "horizontal",legend.title = element_text(size=15))
ggsave("Controlled_hired1.png")
MCdata <- read.csv("~/Desktop/R Projects/MCproject/MCdata_cleaned_v2.csv")
names(MCdata)
summary(MCdata)
library(ISLR)
library(memisc)
library(gmodels)
library(aod)
library(tigerstats)
library(vcd)
library(ggplot2)
library(xlsx)
library(lmtest)
library(sandwich)
library(foreign)
attach(MCdata)
MCdata['male']=ifelse(female==0,1,0)
MCdata['train_index']=ifelse(MCdata$Dateofpanel == '3/1/2017', 0,1)
MCdata_subset = MCdata[train_index==1,]
Candidate.URRFemale = sum(MCdata$female == 1 & MCdata$urr ==1)
Candidate.URRMale = sum(MCdata$female == 0 & MCdata$urr ==1)
Candidate.nonURRFemale = sum(MCdata$female == 1 & MCdata$urr==0)
Candidate.nonURRMale = sum(MCdata$female == 0 & MCdata$urr == 0)
Passed.URRFemale = sum(MCdata$Passed_MC == 1 & MCdata$female == 1 & MCdata$urr == 1)
Passed.URRMale = sum(MCdata$Passed_MC == 1 & MCdata$female == 0 & MCdata$urr ==1)
Passed.nonURRFemale = sum(MCdata$Passed_MC == 1 & MCdata$female == 1 & MCdata$urr==0)
Passed.nonURRMale = sum(MCdata$Passed_MC == 1 & MCdata$female == 0 & MCdata$urr == 0)
Hired.URRFemale = sum(MCdata$Hired_dummy == 1 & MCdata$female == 1 & MCdata$urr ==1)
Hired.URRMale = sum(MCdata$Hired_dummy == 1 & MCdata$female == 0 & MCdata$urr ==1)
Hired.nonURRFemale = sum(MCdata$Hired_dummy == 1 & MCdata$female == 1 & MCdata$urr==0)
Hired.nonURRMale = sum(MCdata$Hired_dummy == 1 & MCdata$female == 0 & MCdata$urr == 0)
sum(Candidate.URRFemale,Candidate.URRMale,Candidate.nonURRFemale,Candidate.nonURRMale)
sum(Passed.URRFemale,Passed.URRMale,Passed.nonURRFemale,Passed.nonURRMale)
sum(Hired.URRFemale,Hired.URRMale,Hired.nonURRFemale,Hired.nonURRMale)
Candidate.URRFemale
Candidate.URRMale
Candidate.nonURRFemale
Candidate.nonURRMale
Passed.URRFemale
Passed.URRMale
Passed.nonURRFemale
Passed.nonURRMale
Hired.URRFemale
Hired.URRMale
Hired.nonURRFemale
Hired.nonURRMale
cor(dept_data[2:12])
dept_data=read.csv('department_hiring.csv')
library(readr)
department_hiring <- read_csv("~/Desktop/R Projects/department_hiring.csv")
View(department_hiring)
dept_data=read_csv("~/Desktop/R Projects/department_hiring.csv")
dept_data=read_csv("~/Desktop/R Projects/department_hiring.csv")
names(dept_data)
pairs(dept_data[,2:11])
attach(dept_data)
dept_data['inter_flow']=internalhires-(interdept_moveout+separation)
plot(inter_flow, externalhires, col='red')
dept_data['inter_flow']=internalhires-(interdept_moveout+separation)
plot(inter_flow, externalhires, col='red')
cor(dept_data[2:12])
plot(interfemale_out,interdept_moveout)
plot(inter_flow,internalhires)
library(ggplot2)
plot(dept, internalfemale_in)
dept_data['total_out']=interdept_moveout+separation
cor(dept_data[2:13])
plot(inter_flow, externalhires)
cor(inter_flow, externalhires)
df.bar=barplot(externalhires, names.arg = dept)
lines(x=df.bar, y = inter_flow)
installed.packages('ggplot2')
install.packages('ggthemes')
library(ggplot2)
library(ggthemes)
dept_move=read.csv('dept_movements.csv')
library(readr)
dept_movements <- read_csv("~/Desktop/R Projects/dept_movements.csv")
View(dept_movements)
dept_move=read_csv("~/Desktop/R Projects/dept_movements.csv")
summary(dept_move)
names(dept_move)
row_name=dept_move[,1]
rownames(dept_move)=row_name
plot=ggplot(dept_move, aes(transfer_in,transfer_out))+
geom_label(aes(fill=dept_type), fontface='bold',color = 'white',label=rownames(dept_move),show.legend=FALSE)+
scale_x_continuous(name="Percent of URR staff transferring in",limits=c(0,80))+
scale_y_continuous(name="Percent of URR staff transferring out", limits=c(0,80))
plot1=plot+geom_abline(slope=1, intercept=0,lwd=0.5)+theme_bw()
plot1
df_poly <- data.frame(
x=c(-Inf, Inf, -Inf),
y=c(-Inf, Inf, Inf)
)
plot2=plot1+geom_polygon(data=df_poly, aes(x=y,y=x), fill='orange',alpha=0.1)
plot2
plot1
plot3=ggplot(dept_move, aes(In, Out))+
geom_label(aes(fill=dept_type), fontface='bold',color = 'white',label=rownames(dept_move),show.legend=FALSE)+
scale_x_continuous(name="Percent of URR staff transferring in",limits=c(0,70))+
scale_y_continuous(name="Percent of URR staff transferring out", limits=c(0,70))+
geom_abline(slope=1, intercept=0,lwd=0.5)+theme_bw()
plot3
plot=ggplot(dept_move, aes(transfer_in,transfer_out))+
geom_label(aes(fill=dept_type), fontface='bold',color = 'white',label=rownames(dept_move),show.legend=FALSE)+
scale_x_continuous(name="Percent of URR staff transferring in",limits=c(0,80))+
scale_y_continuous(name="Percent of URR staff transferring out", limits=c(0,80))
plot1=plot+geom_abline(slope=1, intercept=0,lwd=0.5)+theme_bw()
plot1
df_poly <- data.frame(
x=c(-Inf, Inf, -Inf),
y=c(-Inf, Inf, Inf)
)
plot2=plot1+geom_polygon(data=df_poly, aes(x=y,y=x), fill='orange',alpha=0.1)
plot2
library(ggplot2)
library(ggthemes)
dept_move=read.csv('dept_movements.csv')
qt(0.01, 40)
level = c(2,5,9,7)
income = c(30,40,50,60)
lm.fit = lm(income ~ level)
summary(lm.fit)
1.743^2
qt(.975, 2)
(3.551-3)/1.74
path = "/Users/Hailey/Documents/GitHub/HousingPrice/"
setwd(dir = path)
library(ggplot2)
library(ISLR)
library(MASS)
library(lmtest)
library(sandwich)
library(tree)
library(randomForest)
library(rpart)
library(rpart.plot)
library(Metrics)
library(gbm)
library(xgboost)
library(leaps)
library(corrplot)
library(caret)
library(e1071)
install.packages('randomForest')
library(xgboost)
load(file = 'data/newdata/trainData3.RData')
load(file = 'data/newdata/testData3.RData')
dim(trainData)
dim(testData)
skewness(trainData$SQUARE_FEET)
is.numeric(trainData$BEDS)
#Drop community_no
trainData = within(trainData, rm('community_no'))
testData = within(testData, rm('community_no'))
#Remove baseline variables:
trainData = within(trainData, rm('PROPERTY_TYPE.Condo/Co-op','NeighRich.1'))
testData = within(testData, rm('PROPERTY_TYPE.Condo/Co-op','NeighRich.1'))
#Fixing some naming issue:
colnames(trainData)[colnames(trainData)=='PROPERTY_TYPE.Single Family Residential'] = "PROPERTY_TYPE.Single.Family.Residential"
colnames(testData)[colnames(testData)=='PROPERTY_TYPE.Single Family Residential'] = "PROPERTY_TYPE.Single.Family.Residential"
length(names(trainData))
set.seed(123456)
xgb.chicago1 = xgboost(data = as.matrix(trainData[, -1]), nfold = 5, label = as.matrix(trainData$PRICE),
nrounds = 2200, verbose = FALSE, objective = "reg:linear", eval_metric = "rmse",
nthread = 8, eta = 0.05, gamma = 0, max_depth = 6, min_child_weight = 2,
subsample = 1, colsample_bytree = 1)
print(xgb.chicago1)
xgb.dump(xgb.chicago1, with_stats = T)
xgb.chicago1$params
xgb.plot.tree(model = xgb.chicago1, trees = 0:1)
xgb.plot.tree(model = xgb.chicago1, trees = 0:1, render = TRUE)
install.packages('DiagrammeR')
install.packages("DiagrammeR")
install.packages("DiagrammeR")
library(DiagrammeR)
set.seed(123456)
bag.chicago = randomForest(PRICE~., data = trainData, ntree = 500, importance = TRUE)
library(randomForest)
install.packages('randomForest')
